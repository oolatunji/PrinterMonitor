//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34011.
// 
#pragma warning disable 1591

namespace PrinterFeedsTest.FLSService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FLSSolutionSoap", Namespace="http://tempuri.org/")]
    public partial class FLSSolution : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckNewTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertEncryptedTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertSmartCardIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInsertedTokenStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendLatestPrinterFeedsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FLSSolution() {
            this.Url = global::PrinterFeedsTest.Properties.Settings.Default.PrinterFeedsTest_FLSService_FLSSolution;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckNewTokenCompletedEventHandler CheckNewTokenCompleted;
        
        /// <remarks/>
        public event InsertEncryptedTokenCompletedEventHandler InsertEncryptedTokenCompleted;
        
        /// <remarks/>
        public event InsertSmartCardIDCompletedEventHandler InsertSmartCardIDCompleted;
        
        /// <remarks/>
        public event CheckInsertedTokenStatusCompletedEventHandler CheckInsertedTokenStatusCompleted;
        
        /// <remarks/>
        public event UserExistsCompletedEventHandler UserExistsCompleted;
        
        /// <remarks/>
        public event SendLatestPrinterFeedsCompletedEventHandler SendLatestPrinterFeedsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckNewToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TokenResponse CheckNewToken(string username, string userSmartCardID) {
            object[] results = this.Invoke("CheckNewToken", new object[] {
                        username,
                        userSmartCardID});
            return ((TokenResponse)(results[0]));
        }
        
        /// <remarks/>
        public void CheckNewTokenAsync(string username, string userSmartCardID) {
            this.CheckNewTokenAsync(username, userSmartCardID, null);
        }
        
        /// <remarks/>
        public void CheckNewTokenAsync(string username, string userSmartCardID, object userState) {
            if ((this.CheckNewTokenOperationCompleted == null)) {
                this.CheckNewTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckNewTokenOperationCompleted);
            }
            this.InvokeAsync("CheckNewToken", new object[] {
                        username,
                        userSmartCardID}, this.CheckNewTokenOperationCompleted, userState);
        }
        
        private void OnCheckNewTokenOperationCompleted(object arg) {
            if ((this.CheckNewTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckNewTokenCompleted(this, new CheckNewTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertEncryptedToken", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response InsertEncryptedToken(CHECK_WEBTOKEN webToken) {
            object[] results = this.Invoke("InsertEncryptedToken", new object[] {
                        webToken});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void InsertEncryptedTokenAsync(CHECK_WEBTOKEN webToken) {
            this.InsertEncryptedTokenAsync(webToken, null);
        }
        
        /// <remarks/>
        public void InsertEncryptedTokenAsync(CHECK_WEBTOKEN webToken, object userState) {
            if ((this.InsertEncryptedTokenOperationCompleted == null)) {
                this.InsertEncryptedTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertEncryptedTokenOperationCompleted);
            }
            this.InvokeAsync("InsertEncryptedToken", new object[] {
                        webToken}, this.InsertEncryptedTokenOperationCompleted, userState);
        }
        
        private void OnInsertEncryptedTokenOperationCompleted(object arg) {
            if ((this.InsertEncryptedTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertEncryptedTokenCompleted(this, new InsertEncryptedTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertSmartCardID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response InsertSmartCardID(string smartCardID) {
            object[] results = this.Invoke("InsertSmartCardID", new object[] {
                        smartCardID});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void InsertSmartCardIDAsync(string smartCardID) {
            this.InsertSmartCardIDAsync(smartCardID, null);
        }
        
        /// <remarks/>
        public void InsertSmartCardIDAsync(string smartCardID, object userState) {
            if ((this.InsertSmartCardIDOperationCompleted == null)) {
                this.InsertSmartCardIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertSmartCardIDOperationCompleted);
            }
            this.InvokeAsync("InsertSmartCardID", new object[] {
                        smartCardID}, this.InsertSmartCardIDOperationCompleted, userState);
        }
        
        private void OnInsertSmartCardIDOperationCompleted(object arg) {
            if ((this.InsertSmartCardIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertSmartCardIDCompleted(this, new InsertSmartCardIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckInsertedTokenStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response CheckInsertedTokenStatus(string token) {
            object[] results = this.Invoke("CheckInsertedTokenStatus", new object[] {
                        token});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInsertedTokenStatusAsync(string token) {
            this.CheckInsertedTokenStatusAsync(token, null);
        }
        
        /// <remarks/>
        public void CheckInsertedTokenStatusAsync(string token, object userState) {
            if ((this.CheckInsertedTokenStatusOperationCompleted == null)) {
                this.CheckInsertedTokenStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInsertedTokenStatusOperationCompleted);
            }
            this.InvokeAsync("CheckInsertedTokenStatus", new object[] {
                        token}, this.CheckInsertedTokenStatusOperationCompleted, userState);
        }
        
        private void OnCheckInsertedTokenStatusOperationCompleted(object arg) {
            if ((this.CheckInsertedTokenStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInsertedTokenStatusCompleted(this, new CheckInsertedTokenStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UserExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UserExists(string username, string password) {
            object[] results = this.Invoke("UserExists", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UserExistsAsync(string username, string password) {
            this.UserExistsAsync(username, password, null);
        }
        
        /// <remarks/>
        public void UserExistsAsync(string username, string password, object userState) {
            if ((this.UserExistsOperationCompleted == null)) {
                this.UserExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserExistsOperationCompleted);
            }
            this.InvokeAsync("UserExists", new object[] {
                        username,
                        password}, this.UserExistsOperationCompleted, userState);
        }
        
        private void OnUserExistsOperationCompleted(object arg) {
            if ((this.UserExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserExistsCompleted(this, new UserExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendLatestPrinterFeeds", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response SendLatestPrinterFeeds(string printerUID, string printerSerialNumber, int ribbonCount, int noOfCardsPrinted, bool printerOnline, string printerType) {
            object[] results = this.Invoke("SendLatestPrinterFeeds", new object[] {
                        printerUID,
                        printerSerialNumber,
                        ribbonCount,
                        noOfCardsPrinted,
                        printerOnline,
                        printerType});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void SendLatestPrinterFeedsAsync(string printerUID, string printerSerialNumber, int ribbonCount, int noOfCardsPrinted, bool printerOnline, string printerType) {
            this.SendLatestPrinterFeedsAsync(printerUID, printerSerialNumber, ribbonCount, noOfCardsPrinted, printerOnline, printerType, null);
        }
        
        /// <remarks/>
        public void SendLatestPrinterFeedsAsync(string printerUID, string printerSerialNumber, int ribbonCount, int noOfCardsPrinted, bool printerOnline, string printerType, object userState) {
            if ((this.SendLatestPrinterFeedsOperationCompleted == null)) {
                this.SendLatestPrinterFeedsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendLatestPrinterFeedsOperationCompleted);
            }
            this.InvokeAsync("SendLatestPrinterFeeds", new object[] {
                        printerUID,
                        printerSerialNumber,
                        ribbonCount,
                        noOfCardsPrinted,
                        printerOnline,
                        printerType}, this.SendLatestPrinterFeedsOperationCompleted, userState);
        }
        
        private void OnSendLatestPrinterFeedsOperationCompleted(object arg) {
            if ((this.SendLatestPrinterFeedsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendLatestPrinterFeedsCompleted(this, new SendLatestPrinterFeedsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TokenResponse : Response {
        
        private CHECK_WEBTOKEN tokenField;
        
        /// <remarks/>
        public CHECK_WEBTOKEN token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CHECK_WEBTOKEN {
        
        private int idField;
        
        private string tokenField;
        
        private string encyptedTokenField;
        
        private System.DateTime dateOfrequestField;
        
        private int statusField;
        
        private string hashedTokenField;
        
        private string usernameField;
        
        private string smartCardIDField;
        
        private string hashedSmartCardIDField;
        
        /// <remarks/>
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
            }
        }
        
        /// <remarks/>
        public string EncyptedToken {
            get {
                return this.encyptedTokenField;
            }
            set {
                this.encyptedTokenField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateOfrequest {
            get {
                return this.dateOfrequestField;
            }
            set {
                this.dateOfrequestField = value;
            }
        }
        
        /// <remarks/>
        public int Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string HashedToken {
            get {
                return this.hashedTokenField;
            }
            set {
                this.hashedTokenField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string SmartCardID {
            get {
                return this.smartCardIDField;
            }
            set {
                this.smartCardIDField = value;
            }
        }
        
        /// <remarks/>
        public string HashedSmartCardID {
            get {
                return this.hashedSmartCardIDField;
            }
            set {
                this.hashedSmartCardIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TokenResponse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Response {
        
        private bool successfulField;
        
        private string errMessageField;
        
        /// <remarks/>
        public bool Successful {
            get {
                return this.successfulField;
            }
            set {
                this.successfulField = value;
            }
        }
        
        /// <remarks/>
        public string ErrMessage {
            get {
                return this.errMessageField;
            }
            set {
                this.errMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckNewTokenCompletedEventHandler(object sender, CheckNewTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckNewTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckNewTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TokenResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TokenResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void InsertEncryptedTokenCompletedEventHandler(object sender, InsertEncryptedTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertEncryptedTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertEncryptedTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void InsertSmartCardIDCompletedEventHandler(object sender, InsertSmartCardIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertSmartCardIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertSmartCardIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CheckInsertedTokenStatusCompletedEventHandler(object sender, CheckInsertedTokenStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInsertedTokenStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInsertedTokenStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void UserExistsCompletedEventHandler(object sender, UserExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SendLatestPrinterFeedsCompletedEventHandler(object sender, SendLatestPrinterFeedsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendLatestPrinterFeedsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendLatestPrinterFeedsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591